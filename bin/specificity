#!/usr/bin/env node

var defaults = {
    columnSize: 80
};

function toInteger(value, defaultValue) {
    value = parseInt(value, 10);
    return isNaN(value) ? defaultValue : value;
}

var program = require('commander'),
    fs = require('fs'),
    path = require('path'),
    glob = require('glob'),
    specificity = require('..'),
    pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json')));

program
    .version(pkg.version)
    ;

program
    .command('parse <file...>')
    .description('extract data from CSS files and create a profile')
    .option('-d, --directory <path>', 'change the working directory')
    .option('-o, --output <file>',    'save the profile to the given file')
    .option('-l, --label <name>',     'set custom label to the profile')
    .option('--unique-selectors',     'consider only unique selectors')
    .on('--help', function() {
        console.log('  Examples:');
        console.log('');
        console.log('    $ node-specificity parse css/main.css css/print.css');
        console.log('    $ node-specificity parse css/*.css');
        console.log('    $ node-specificity parse --label=2014-12 --output=css.json --directory=css *.css');
        console.log('');
    })
    .action(function (options) {
        var cwd = this.directory ? path.resolve(this.directory) : process.cwd(),
            files = [];
        options.forEach(function (opt) {
            glob.sync(path.join(cwd, opt)).forEach(function (file) {
                var name = path.relative(cwd, file);
                if (files.indexOf(name) === -1) {
                    files.push(name);
                }
            });
        });
        if (files.length) {
            var result = specificity.parse(files, {
                cwd: cwd,
                uniqueSelectors: !!this.uniqueSelectors,
                label: this.label ? this.label : ''
            });
            if (this.output) {
                fs.writeFileSync(this.output, JSON.stringify(result));
            } else {
                console.log(JSON.stringify(result));
            }
        } else {
            this.help();
        }
    })
    ;

function isAbsolute(p) {
    return path.resolve(p) === path.normalize(p);
}

function loadProfiles(cwd, options) {
    var files = [];
    options.forEach(function (opt) {
        if (opt === '-') {
            if (files.indexOf('-') === -1) {
                files.push('-');
            }
        } else {
            var p = isAbsolute(opt) ? opt : path.join(cwd, opt);
            glob.sync(p).forEach(function (file) {
                if (files.indexOf(file) === -1) {
                    files.push(file);
                }
            });
        }
    });
    if (files.length === 0) {
        return;
    } else {
        return files.map(function (file) {
            var json;
            try {
                if (file === '-') {
                    json = readStdInSync();
                } else {
                    json = fs.readFileSync(file, 'utf8');
                }
                json = JSON.parse(json)
            } catch (e) {
                console.error(e.toString());
                process.exit(2);
            }
            return {
                file: file,
                json: json
            };
        });
    }
}

program
    .command('explore <file...>')
    .description('represent the outcomes of a parse command')
    .option('-r, --report <name>',    'specify the report name [inspect]: inspect, json, server', 'inspect')
    .option('-d, --directory <path>', 'change the working directory')
    .option('--no-selectors',         'inspect report: don\'t print selectors table')
    .option('--no-summary',           'inspect report: don\'t print summary table')
    .option('--no-charts',            'inspect report: don\'t print distribution histogram')
    .option('--no-color',             'disable colors')
    .option('--column-size <length>', 'inspect report: size of the selector column in the report [' + defaults.columnSize + ']', toInteger, defaults.columnSize)
    .option('--server-port <port>',   'server report: port number [4000]', parseInt, 4000)
    .on('--help', function() {
        console.log('  Examples:');
        console.log('');
        console.log('    $ node-specificity explore profiles/2014-11.json profiles/2014-12.json');
        console.log('    $ node-specificity explore --report server --directory=profiles *.json');
        console.log('');
    })
    .action(function (options) {
        require('colors').enabled = this.color;
        var profiles = loadProfiles(
            this.directory ? path.resolve(this.directory) : process.cwd(),
            options
        );
        if (profiles) {
            try {
                var report = require(path.join('..', 'src', 'reports', this.report));
            } catch (e) {
                console.error('\n  error: unsupported report (' + e.message + ')\n');
                process.exit(3);
            }
            report(profiles, this);
        } else {
            this.help();
        }
    })
    ;

program
    .command('query <file...>')
    .description('run queries against selectors')
    .option('-d, --directory <path>', 'change the working directory')
    .option('-q, --query <query>',    'query (see examples)')
    .option('--no-color',             'disable colors')
    .option('--column-size <length>', 'size of the selector column in the report [' + defaults.columnSize + ']', toInteger, defaults.columnSize)
    .on('--help', function() {
        console.log('  Queries:');
        console.log('');
        console.log('    1) specificity = 0,1,0');
        console.log('    2) specificity >= 1,0,0 and specificity < 2,0,0');
        console.log('    3) specificity = 1,*,*');
        console.log('    4) specificity > 1,0,0 and not (specificity = 1,1,1)');
        console.log('    5) important > 0');
        console.log('    6) a = 1 or b = 1 or c = 1');
        console.log('');
        console.log('  Examples:');
        console.log('');
        console.log('    $ node-specificity query profiles/2015-02.json --query "specificity > 1,0,0"');
        console.log('    $ node-specificity query --directory=profiles *.json -q "specifcity = *,5,* and important > 0"');
        console.log('');
    })
    .action(function (options) {
        require('colors').enabled = this.color;
        if (!this.query) {
            console.error('\n  error: option `-q, --query <query>\' required\n');
            process.exit(4);
        }
        var profiles = loadProfiles(
            this.directory ? path.resolve(this.directory) : process.cwd(),
            options
        );
        if (profiles) {
            var query = require(path.join('..', 'src', 'query'));
            query(this.query, profiles, this);
        } else {
            this.help();
        }
    })
    ;

program
    .on('*', function() {
        program.help();
    });

// EPIPE error happens constantly when program is writing to stdout through a pipe that has been closed.
// More information: https://github.com/joyent/node/issues/3211
process.stdout.on('error', function (err) {
    if (err.code === 'EPIPE') {
        process.exit();
    }
})

program.parse(process.argv);

if (program.rawArgs.length == 2) program.help();

function readStdInSync() {
    var result = '',
        bufSize = 512,
        buf = new Buffer(bufSize),
        bytes;
    process.stdin.resume();
    for (;;) {
        try {
            bytes = fs.readSync(process.stdin.fd, buf, 0, bufSize);
        } catch (e) {
            if (e.code === 'EAGAIN') {
                console.error('\nerror: interactive stdin input not supported\n');
                process.exit(1);
            } else if (e.code === 'EOF') {
                break;
            }
            throw e;
        }
        if (bytes === 0) {
            break;
        }
        result += buf.toString('utf8', 0, bytes);
    }
    process.stdin.pause();
    return result;
}
